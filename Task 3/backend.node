const express = require('express');
const admin = require('firebase-admin');
const bcrypt = require('bcrypt');
const serviceAccount = require('./path/to/serviceAccountKey.json');

const app = express();
const port = 8080;

// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: 'https://your-firebase-database-url.firebaseio.com'
});

// Middleware for parsing JSON request body
app.use(express.json());

// Firebase Firestore instance
const db = admin.firestore();

// Signup endpoint
app.post('/signup', async (req, res) => {
  const { userId, password } = req.body;

  try {
    // Check if the user already exists
    const userDoc = await db.collection('users').doc(userId).get();
    if (userDoc.exists) {
      return res.status(409).json({ error: 'User already exists' });
    }

    // Hash the password using bcrypt
    const hashedPassword = await bcrypt.hash(password, 10);

    // Store the user credentials in Firebase
    await db.collection('users').doc(userId).set({ password: hashedPassword });

    res.status(201).json({ message: 'Signup successful' });
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Login endpoint
app.post('/login', async (req, res) => {
  const { userId, password } = req.body;

  try {
    // Retrieve the user from Firebase
    const userDoc = await db.collection('users').doc(userId).get();
    if (!userDoc.exists) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    // Compare the provided password with the hashed password
    const passwordMatch = await bcrypt.compare(password, userDoc.data().password);
    if (!passwordMatch) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    res.status(200).json({ message: 'Login successful' });
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
